var searchIndex = JSON.parse('{\
"fortran_rs":{"doc":"<code>fortran.rs</code>","t":"HAAAFAAAAAAAADLLLLMLMMLLLAAANDENLLLLLLLLFLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNENNNNNNNNNLLLLFLLLFLFLLLFDLLLLMLLLLLMFMLLLLMFNENNLLLLLFFFLLLDLLLLLMLLLLLLLMMLMLLLLMFFNNNNNNNNNNNNNNNENNNLLLLLLLLLLLLLLAFDLLMLFLMLLLNNNNNEFLLFLLLLLLLLLLL","n":["VERBOSE","ast","helpers","lexer","main","parser","program","tokenizer","tokens","utils","validation","variables","verbose","Node","borrow","borrow_mut","from","into","left","new","right","token","try_from","try_into","type_id","cli","errors","file","Check","Cli","Commands","Run","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","check_path","clone","clone","clone_into","clone_into","command","command","command_for_update","debug","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get_command","get_path","get_verbose","get_werror","group_id","has_subcommand","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","file","file","verbose","verbose","werror","Critical","Error","FileNotFound","ForbiddenCharacter","NotImplemented","Syntax","TooCharactersOnLine","Type","UnexpectedToken","UnknownToken","WrongFormat","borrow","borrow_mut","clone","clone_into","error_to_string","fmt","from","into","raise","to_owned","to_stderr","try_from","try_into","type_id","warn","File","borrow","borrow_mut","clone","clone_into","content","debug","from","get_content","get_path","into","name","new","path","to_owned","try_from","try_into","type_id","version","lexer","Double","InQuote","No","Single","borrow","borrow_mut","eq","from","into","new_line","parse","quote_management","try_from","try_into","type_id","Program","borrow","borrow_mut","clone","clone_into","debug","filename","from","get_filename","get_line","get_lines","get_name","get_variables","into","lines","name","new","pc","to_owned","try_from","try_into","type_id","variables","variables","word","Assign","Comma","Do","Else","End","Identifier","If","Null","Operator","Other","Print","Program","Return","String","Then","Token","Type","Variable","While","borrow","borrow_mut","clone","clone_into","debug","eq","fmt","from","get_value","into","to_owned","try_from","try_into","type_id","print","print_to_stdout","ValidationError","borrow","borrow_mut","error","from","identifier_name","into","message","try_from","try_into","type_id","Character","Integer","Logical","None","Real","Variable","assign_type","borrow","borrow_mut","change_in_line","clone","clone_into","eq","fmt","from","get_value_string","into","to_owned","try_from","try_into","type_id"],"q":[[0,"fortran_rs"],[13,"fortran_rs::ast"],[25,"fortran_rs::helpers"],[28,"fortran_rs::helpers::cli"],[77,"fortran_rs::helpers::cli::Commands"],[82,"fortran_rs::helpers::errors"],[108,"fortran_rs::helpers::file"],[127,"fortran_rs::lexer"],[128,"fortran_rs::parser"],[143,"fortran_rs::program"],[166,"fortran_rs::tokenizer"],[168,"fortran_rs::tokens"],[201,"fortran_rs::utils"],[202,"fortran_rs::utils::print"],[203,"fortran_rs::validation"],[214,"fortran_rs::variables"]],"d":["","","","Lexer","","Parser module","Program","","Tokens","","","Variables","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","This module is used to parse the arguments passed to the …","","File Traitement","Check the syntax of the file passed as argument","This struct is used to parse the arguments passed to the …","This struct is used to parse the arguments passed to the …","Run the Fortran file passed as argument","","","","","","","","","This function checks if the file exists.","","","","","","","","This function prints the <code>Cli</code> struct for debug purposes. …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","This function returns the called command.","This function returns the path to the file to interpret.","This function returns the value of the <code>verbose</code> argument.","This function returns the value of the <code>werror</code> argument.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Print the comment during the execution of the program","Path to the file to interpret","Path to the file to interpret","Print the comment during the execution of the program","Print the comment during the execution of the program","Threat <code>Warning</code> as <code>Error</code>","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","This struct contains the file’s path, name, content, …","","","","","","","Returns the argument unchanged.","This function returns the file’s content.","","Calls <code>U::from(self)</code>.","","This function returns the file’s arguments.","","","","","","","This function returns the tokens.","","This enum contains the different types of quotes, and if …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This function creates a new line. It’s called when a new …","This function parses the file.","This function manages the quotes. It’s called when a …","","","","This struct contains the program’s name, lines, …","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","This enum contains the different types of tokens.","","","","","","","","This function returns the name of the token.","","","Returns the argument unchanged.","This function returns the value of the token.","Calls <code>U::from(self)</code>.","","","","","Print","This function prints the value of the variable to the …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","This enum contains the different types of variables.","This function assigns the type of the variable.","","","This function changes the variable in the line.","","","","","Returns the argument unchanged.","This function returns the value of the variable.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,11,0,0,11,10,10,11,11,10,11,10,11,0,10,11,10,11,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,30,31,30,31,31,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,0,18,0,18,18,18,0,0,20,20,20,20,20,20,20,20,20,20,20,0,20,20,20,20,20,20,0,21,0,21,21,21,21,21,21,21,0,0,0,21,21,21,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,29,29,29,29,0,29,29,29,29,29,25,25,25,25,25,0,0,25,25,0,25,25,25,25,25,25,25,25,25,25,25],"f":[0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[1,[4,[[3,[2]]]],[4,[[3,[2]]]]],2],0,0,[[],5],[[],5],[[],6],0,0,0,0,0,0,0,[7,7],[7,7],[7,7],[7,7],[[]],[[]],[[]],[[]],[8,[[5,[9,9]]]],[10,10],[11,11],[[]],[[]],[[],7],0,[[],7],[10],[[11,12],13],[[]],[[]],[14,[[5,[10,15]]]],[14,[[5,[11,15]]]],[14,[[5,[10,15]]]],[14,[[5,[11,15]]]],[10,11],[10,9],[10,16],[10,16],[[],[[4,[17]]]],[8,16],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[10,14],[[5,[15]]]],[[11,14],[[5,[15]]]],[[10,14],[[5,[15]]]],[[11,14],[[5,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[18,18],[[]],[18,8],[[18,12],13],[[]],[[]],[[19,18,9]],[[]],[[19,18,9,16],9],[[],5],[[],5],[[],6],[[19,18,9]],0,[[]],[[]],[20,20],[[]],0,[20],[[]],[20,9],[20,9],[[]],0,[10,20],0,[[]],[[],5],[[],5],[[],6],0,[19],0,0,0,0,[[]],[[]],[[21,21],16],[[]],[[]],[[[22,[[22,[1]]]],[22,[1]],9]],[20,19],[[21,23,9,[22,[1]]]],[[],5],[[],5],[[],6],0,[[]],[[]],[19,19],[[]],[19],0,[[]],[19,9],[19,24],[19,[[22,[[22,[1]]]]]],[19,9],[19,[[26,[9,25]]]],[[]],0,0,[[9,[22,[[22,[1]]]],[26,[9,25]],9],19],0,[[]],[[],5],[[],5],[[],6],0,[[[27,[[22,[1]]]]],[[26,[9,25]]]],[[[22,[1]],9,16]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,9],[[1,1],16],[[1,12],13],[[]],[1,9],[[]],[[]],[[],5],[[],5],[[],6],0,[[[22,[1]],28,19]],0,[[]],[[]],0,[[]],[9,[[5,[29]]]],[[]],0,[[],5],[[],5],[[],6],0,0,0,0,0,0,[[[22,[1]],[26,[9,25]]]],[[]],[[]],[[[22,[1]],9,28]],[25,25],[[]],[[25,25],16],[[25,12],13],[[]],[25,9],[[]],[[]],[[],5],[[],5],[[],6]],"c":[],"p":[[4,"Token"],[3,"Node"],[3,"Box"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Command"],[15,"str"],[3,"String"],[3,"Cli"],[4,"Commands"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[15,"bool"],[3,"Id"],[4,"Error"],[3,"Program"],[3,"File"],[4,"InQuote"],[3,"Vec"],[15,"char"],[15,"u8"],[4,"Variable"],[3,"HashMap"],[15,"slice"],[15,"usize"],[3,"ValidationError"],[13,"Run"],[13,"Check"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
