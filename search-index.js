var searchIndex = JSON.parse('{\
"fortran_rs":{"doc":"<code>fortran.rs</code>","t":"HAAAFAAAAAAAAENNLLFLLLLLLMMMAAANDENLLLLLLLLFLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNENNNNNNNNNLLLLFLLLFLFLLLFDLLLLMLLLLLMFMLLLLMFAFNENNLLLLLFFFLLLDLLLLLMLLLLLLLMMLMLLLLMFFNNNNNNNNNNNNNNNENNNLLLLLLLLLLLLLLDLLMLFLMLLLNNNNNEFLLFLLLLLLLLLLL","n":["VERBOSE","ast","helpers","lexer","main","modules","parser","program","tokenizer","tokens","validation","variables","verbose","Ast","Empty","Node","borrow","borrow_mut","eval","from","into","new","try_from","try_into","type_id","left","right","token","cli","errors","file","Check","Cli","Commands","Run","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","check_path","clone","clone","clone_into","clone_into","command","command","command_for_update","debug","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get_command","get_path","get_verbose","get_werror","group_id","has_subcommand","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","file","file","verbose","verbose","werror","Critical","Error","FileNotFound","ForbiddenCharacter","NotImplemented","Syntax","TooCharactersOnLine","Type","UnexpectedToken","UnknownToken","WrongFormat","borrow","borrow_mut","clone","clone_into","error_to_string","fmt","from","into","raise","to_owned","to_stderr","try_from","try_into","type_id","warn","File","borrow","borrow_mut","clone","clone_into","content","debug","from","get_content","get_path","into","name","new","path","to_owned","try_from","try_into","type_id","version","lexer","print","print_to_stdout","Double","InQuote","No","Single","borrow","borrow_mut","eq","from","into","new_line","parse","quote_management","try_from","try_into","type_id","Program","borrow","borrow_mut","clone","clone_into","debug","filename","from","get_filename","get_line","get_lines","get_name","get_variables","into","lines","name","new","pc","to_owned","try_from","try_into","type_id","variables","variables","word","Assign","Comma","Do","Else","End","Identifier","If","Null","Operator","Other","Print","Program","Return","String","Then","Token","Type","Variable","While","borrow","borrow_mut","clone","clone_into","debug","eq","fmt","from","get_value","into","to_owned","try_from","try_into","type_id","ValidationError","borrow","borrow_mut","error","from","identifier_name","into","message","try_from","try_into","type_id","Character","Integer","Logical","None","Real","Variable","assign_type","borrow","borrow_mut","change_in_line","clone","clone_into","eq","fmt","from","get_value_string","into","to_owned","try_from","try_into","type_id"],"q":[[0,"fortran_rs"],[13,"fortran_rs::ast"],[25,"fortran_rs::ast::Ast"],[28,"fortran_rs::helpers"],[31,"fortran_rs::helpers::cli"],[80,"fortran_rs::helpers::cli::Commands"],[85,"fortran_rs::helpers::errors"],[111,"fortran_rs::helpers::file"],[130,"fortran_rs::lexer"],[131,"fortran_rs::modules"],[132,"fortran_rs::modules::print"],[133,"fortran_rs::parser"],[148,"fortran_rs::program"],[171,"fortran_rs::tokenizer"],[173,"fortran_rs::tokens"],[206,"fortran_rs::validation"],[217,"fortran_rs::variables"]],"d":["","","","Lexer","","","Parser module","Program","","Tokens","Validation module.","Variables","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","This module is used to parse the arguments passed to the …","Errors Module","File Traitement","Check the syntax of the file passed as argument","This struct is used to parse the arguments passed to the …","This struct is used to parse the arguments passed to the …","Run the Fortran file passed as argument","","","","","","","","","This function checks if the file exists.","","","","","","","","This function prints the <code>Cli</code> struct for debug purposes. …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","This function returns the called command.","This function returns the path to the file to interpret.","This function returns the value of the <code>verbose</code> argument.","This function returns the value of the <code>werror</code> argument.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Print the comment during the execution of the program","Path to the file to interpret","Path to the file to interpret","Print the comment during the execution of the program","Print the comment during the execution of the program","Threat <code>Warning</code> as <code>Error</code>","This error is raised when a critical error is encountered.","This enum contains the different types of errors.","This error is raised when a file is not found.","This error is raised when a line contains a forbidden …","This error is raised when a feature is not implemented.","This error is raised when the syntax is invalid.","This error is raised when a line contains more than 100 …","This error is raised when a type is invalid.","This error is raised when a token is unexpected.","This error is raised when a token is unknown.","This error is raised when a line is not formatted …","","","","","This function returns the string corresponding to the …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This function returns the string corresponding to the …","","This function returns the string corresponding to the …","","","","This function returns the string corresponding to the …","This struct contains the file’s path, name, content, …","","","","","","","Returns the argument unchanged.","This function returns the file’s content.","","Calls <code>U::from(self)</code>.","","This function returns the file’s arguments.","","","","","","","This function returns the tokens.","Print","This function prints the value of the variable to the …","This variant is used when there is a double quote. (<code>&quot;</code>)","This enum contains the different types of quotes, and if …","This variant is used when there is no quote.","This variant is used when there is a single quote. (<code>&#39;</code>)","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This function creates a new line. It’s called when a new …","This function parses the file.","This function manages the quotes. It’s called when a …","","","","This struct is the schema of the <code>program</code> object.","","","","","","This field contains the program’s path.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","This field contains the program’s lines.","This field contains the program’s name.","","This field contains the program’s program counter.","","","","","This field contains the program’s variables.","","","","","","","","","","","","","","","","","","This enum contains the different types of tokens.","","","","","","","","This function returns the name of the token.","","","Returns the argument unchanged.","This function returns the value of the token.","Calls <code>U::from(self)</code>.","","","","","This struct contains the format of the error and the …","","","This field contains type of the error.","Returns the argument unchanged.","This function validates the name of the identifier.","Calls <code>U::from(self)</code>.","This field contains the message of the error.","","","","This variant contains a character.","This variant contains an integer.","This variant contains a logical value.","","This variant contains a real number.","This enum contains the different types of variables.","This function assigns the type of the variable. It is used …","","","This function changes the variable in the line. It is used …","","","","","Returns the argument unchanged.","This function returns the value of the variable. Else, it …","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,30,30,30,0,0,0,10,0,0,10,9,9,10,10,9,10,9,10,0,9,10,9,10,9,9,9,9,10,9,10,9,10,9,10,9,9,9,9,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,31,32,31,32,32,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,0,18,0,18,18,18,0,0,20,20,20,20,20,20,20,20,20,20,20,0,20,20,20,20,20,20,0,0,0,23,0,23,23,23,23,23,23,23,0,0,0,23,23,23,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,29,29,29,29,0,29,29,29,29,29,26,26,26,26,26,0,0,26,26,0,26,26,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[[]],[[]],[[2,[3,[1]],[3,[1]]],1],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,[6,6],[6,6],[6,6],[6,6],[[]],[[]],[[]],[[]],[7,[[4,[8,8]]]],[9,9],[10,10],[[]],[[]],[[],6],0,[[],6],[9],[[10,11],12],[[]],[[]],[13,[[4,[9,14]]]],[13,[[4,[10,14]]]],[13,[[4,[9,14]]]],[13,[[4,[10,14]]]],[9,10],[9,8],[9,15],[9,15],[[],[[17,[16]]]],[7,15],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[9,13],[[4,[14]]]],[[10,13],[[4,[14]]]],[[9,13],[[4,[14]]]],[[10,13],[[4,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[18,18],[[]],[18,7],[[18,11],12],[[]],[[]],[[19,18,8]],[[]],[[19,18,8,15],8],[[],4],[[],4],[[],5],[[19,18,8]],0,[[]],[[]],[20,20],[[]],0,[20],[[]],[20,8],[20,8],[[]],0,[9,20],0,[[]],[[],4],[[],4],[[],5],0,[19],0,[[[21,[2]],22,19]],0,0,0,0,[[]],[[]],[[23,23],15],[[]],[[]],[[[21,[[21,[2]]]],[21,[2]],8]],[20,19],[[23,24,8,[21,[2]]]],[[],4],[[],4],[[],5],0,[[]],[[]],[19,19],[[]],[19],0,[[]],[19,8],[19,25],[19,[[21,[[21,[2]]]]]],[19,8],[19,[[27,[8,26]]]],[[]],0,0,[[8,[21,[[21,[2]]]],[27,[8,26]],8],19],0,[[]],[[],4],[[],4],[[],5],0,[[[28,[[21,[2]]]]],[[27,[8,26]]]],[[[21,[2]],8,15]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[2,2],[[]],[2,8],[[2,2],15],[[2,11],12],[[]],[2,8],[[]],[[]],[[],4],[[],4],[[],5],0,[[]],[[]],0,[[]],[8,[[4,[29]]]],[[]],0,[[],4],[[],4],[[],5],0,0,0,0,0,0,[[[21,[2]],[27,[8,26]]]],[[]],[[]],[[[21,[2]],8,22]],[26,26],[[]],[[26,26],15],[[26,11],12],[[]],[26,8],[[]],[[]],[[],4],[[],4],[[],5]],"c":[],"p":[[4,"Ast"],[4,"Token"],[3,"Box"],[4,"Result"],[3,"TypeId"],[3,"Command"],[15,"str"],[3,"String"],[3,"Cli"],[4,"Commands"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[15,"bool"],[3,"Id"],[4,"Option"],[4,"Error"],[3,"Program"],[3,"File"],[3,"Vec"],[15,"usize"],[4,"InQuote"],[15,"char"],[15,"u8"],[4,"Variable"],[3,"HashMap"],[15,"slice"],[3,"ValidationError"],[13,"Node"],[13,"Run"],[13,"Check"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
