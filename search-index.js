var searchIndex = JSON.parse('{\
"fortran_rs":{"doc":"<code>fortran.rs</code>","t":"HAAAFAAAAAAADLLLLMLMMLLLAAANDENLLLLLLLLFLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNENNNNNNNLLLLFLLFLFLFLLLFDLLLLMLLLLLMFMLLLLMFFFFFDLLLLLMLLLLLLLMMLMLLLLLMNENNLLLLLFFFLLLNNNNNNNNNNNNNNNNENNNLLLLLLLLLLLLLLLAFNNNNDEFLLLLLLLLLLLLLLLLLLLLMLLLLLFLLLLLLLLM","n":["VERBOSE","ast","helpers","lexer","main","parser","program","tokenizer","tokens","utils","variables","verbose","Node","borrow","borrow_mut","from","into","left","new","right","token","try_from","try_into","type_id","cli","errors","file","Check","Cli","Commands","Run","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","check_path","clone","clone","clone_into","clone_into","command","command","command_for_update","debug","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get_command","get_path","get_verbose","get_werror","group_id","has_subcommand","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","file","file","verbose","verbose","werror","Critical","Error","FileNotFound","NotImplemented","Syntax","TooCharactersOnLine","Type","UnexpectedToken","UnknownToken","borrow","borrow_mut","clone","clone_into","error_to_string","fmt","from","get_code_number","into","raise","to_owned","to_stderr","try_from","try_into","type_id","warn","File","borrow","borrow_mut","clone","clone_into","content","debug","from","get_content","get_path","into","name","new","path","to_owned","try_from","try_into","type_id","version","lexer","parse_line","parser","split_line","tokenize","Program","borrow","borrow_mut","clone","clone_into","debug","filename","from","get_filename","get_line","get_lines","get_name","get_variables","into","lines","name","new","pc","set_variable","to_owned","try_from","try_into","type_id","variables","Double","InQuote","No","Single","borrow","borrow_mut","eq","from","into","new_line","new_word","tokenizer","try_from","try_into","type_id","Assign","Comment","Do","Else","End","Identifier","If","Null","Number","Operator","Other","Print","Program","Return","String","Then","Token","Type","Variable","While","borrow","borrow_mut","clone","clone_into","debug","eq","fmt","from","get_value","into","new","to_owned","try_from","try_into","type_id","print","print_to_stdout","Character","Integer","Logical","Real","Variable","VariableType","assign","borrow","borrow","borrow_mut","borrow_mut","change_value","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","get_name","get_value","get_value","into","into","name","new","new_character","new_integer","new_logical","new_real","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value"],"q":[[0,"fortran_rs"],[12,"fortran_rs::ast"],[24,"fortran_rs::helpers"],[27,"fortran_rs::helpers::cli"],[76,"fortran_rs::helpers::cli::Commands"],[81,"fortran_rs::helpers::errors"],[106,"fortran_rs::helpers::file"],[125,"fortran_rs::lexer"],[126,"fortran_rs::parser"],[130,"fortran_rs::program"],[154,"fortran_rs::tokenizer"],[169,"fortran_rs::tokens"],[204,"fortran_rs::utils"],[205,"fortran_rs::utils::print"],[206,"fortran_rs::variables"]],"d":["","","","Lexer","","Parser","Program","Tokenizer module","Tokens","","Variables","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","This module is used to parse the arguments passed to the …","","File Traitement","Check the syntax of the file passed as argument","This struct is used to parse the arguments passed to the …","This struct is used to parse the arguments passed to the …","Run the Fortran file passed as argument","","","","","","","","","This function checks if the file exists.","","","","","","","","This function prints the <code>Cli</code> struct for debug purposes. …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","This function returns the called command.","This function returns the path to the file to interpret.","This function returns the value of the <code>verbose</code> argument.","This function returns the value of the <code>werror</code> argument.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Print the comment during the execution of the program","Path to the file to interpret","Path to the file to interpret","Print the comment during the execution of the program","Print the comment during the execution of the program","Threat <code>Warning</code> as <code>Error</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","This struct contains the file’s path, name, content, …","","","","","","","Returns the argument unchanged.","This function returns the file’s content.","","Calls <code>U::from(self)</code>.","","This function returns the file’s arguments.","","","","","","","This function returns the tokens.","This function parses a line.","This function parses the file.","This function splits the file into lines.","This function returns the token corresponding to the word.","This struct contains the program’s name, lines, …","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","This function returns the program counter.","","","","","","","This enum contains the different types of quotes, and if …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","This enum contains the different types of tokens.","","","","","","","","This function returns the name of the token.","","","Returns the argument unchanged.","This function returns the value of the token.","Calls <code>U::from(self)</code>.","This function returns a new token.","","","","","Print","This function prints the value of the variable to the …","","","","","","This enum contains the different types of variables.","This function assigns the variables.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","This function returns the value of the variable.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","This function returns a new variable.","This function returns a new variable.","This function returns a new variable.","This function returns a new variable.","This function parses the variables.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,11,0,0,11,10,10,11,11,10,11,10,11,0,10,11,10,11,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,30,31,30,31,31,18,0,18,18,18,18,18,18,18,18,18,18,18,0,18,18,0,18,0,18,0,18,18,18,0,0,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,26,0,26,26,26,26,26,26,26,0,0,0,26,26,26,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,24,24,24,24,0,0,0,24,27,24,27,27,24,27,24,27,24,27,24,27,24,27,27,24,27,24,27,27,27,24,24,24,24,0,24,27,24,27,24,27,24,27,27],"f":[0,0,0,0,[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[1,[4,[[3,[2]]]],[4,[[3,[2]]]]],2],0,0,[[],5],[[],5],[[],6],0,0,0,0,0,0,0,[7,7],[7,7],[7,7],[7,7],[[]],[[]],[[]],[[]],[8,[[5,[9,9]]]],[10,10],[11,11],[[]],[[]],[[],7],0,[[],7],[10],[[11,12],13],[[]],[[]],[14,[[5,[10,15]]]],[14,[[5,[11,15]]]],[14,[[5,[10,15]]]],[14,[[5,[11,15]]]],[10,11],[10,9],[10,16],[10,16],[[],[[4,[17]]]],[8,16],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[10,14],[[5,[15]]]],[[11,14],[[5,[15]]]],[[10,14],[[5,[15]]]],[[11,14],[[5,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[18,18],[[]],[18,8],[[18,12],13],[[]],[18,19],[[]],[[20,18,9]],[[]],[[20,18,9,16],9],[[],5],[[],5],[[],6],[[20,18,9]],0,[[]],[[]],[21,21],[[]],0,[21],[[]],[21,9],[21,9],[[]],0,[10,21],0,[[]],[[],5],[[],5],[[],6],0,[20],[[9,22],[[23,[1]]]],[21,20],[21,[[23,[9]]]],[9,1],0,[[]],[[]],[20,20],[[]],[20],0,[[]],[20,9],[20,19],[20,[[23,[[23,[1]]]]]],[20,9],[20,[[25,[9,24]]]],[[]],0,0,[[9,[23,[[23,[1]]]],[25,[9,24]],9],20],0,[[20,9,24]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,[[]],[[]],[[26,26],16],[[]],[[]],[[[23,[[23,[1]]]],[23,[1]],9]],[[[23,[1]],9]],[21,20],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,9],[[1,1],16],[[1,12],13],[[]],[1,9],[[]],[1,1],[[]],[[],5],[[],5],[[],6],0,[[[23,[1]],22,20]],0,0,0,0,0,0,[[[23,[1]],22,20,1],20],[[]],[[]],[[]],[[]],[[27,24]],[24,24],[27,27],[[]],[[]],[[24,24],16],[[27,27],16],[[24,12],13],[[27,12],13],[[]],[[]],[27,9],[24,9],[27,24],[[]],[[]],0,[[24,9],27],[9,24],[28,24],[16,24],[29,24],[20,20],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0],"c":[],"p":[[4,"Token"],[3,"Node"],[3,"Box"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Command"],[15,"str"],[3,"String"],[3,"Cli"],[4,"Commands"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[15,"bool"],[3,"Id"],[4,"Error"],[15,"u8"],[3,"Program"],[3,"File"],[15,"usize"],[3,"Vec"],[4,"VariableType"],[3,"HashMap"],[4,"InQuote"],[3,"Variable"],[15,"i32"],[15,"f64"],[13,"Run"],[13,"Check"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
